import{b as a,m as t}from"./index.js";const s={INSTALL:"install",START:"start",UPDATE:"update",REMOVE:"remove",DOWNLOAD_MODEL:"download_model"},e=async t=>(await a.post(`/self-manage/installed-instance/app/${t.id}`,t)).data,n=async t=>(await a.get(`/self-manage/installed-instance/${t}`)).data,o=async()=>(await a.get("/self-manage/installed-instance")).data,i=async t=>(await a.delete(`/self-manage/installed-instance/${t}`)).data,c=async a=>new Promise((async s=>{const e=async()=>{try{const n=`${t}/self-manage/installed-instance/${a}`,o=await axios.get(n),i=2e3;200===o.status?(console.log("Received 200, continue"),setTimeout(e,i)):404===o.status?(console.log("Received 404, stop"),s()):(console.log(`Received unexpected status code: ${o.status}`),s())}catch(n){const a=n;404===a.response?.status?(console.log("Received 404, stop"),s()):(console.error("Error",a.message),s())}};await e()}));class l{static isWindows(){const a=navigator.userAgentData;return a&&a.platform?"Windows"===a.platform:!!navigator.userAgent&&/Win(dows )?NT/.test(navigator.userAgent)}static isMacOS(){const a=navigator.userAgentData;return a&&a.platform?"macOS"===a.platform||"MacOS"===a.platform:!!navigator.userAgent&&/Macintosh|Mac OS X/i.test(navigator.userAgent)}}export{s as A,l as O,c as a,n as b,e as c,i as d,o as g};
