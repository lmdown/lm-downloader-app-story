import{i as e,j as n,I as a}from"./index.js";import{u as t,a as o,e as s}from"./lmd-system.js";const i={INSTALL:"install",START:"start",UPDATE:"update",REMOVE:"remove",DOWNLOAD_MODEL:"download_model"};class c{static getRunningWindowPath(a,t,o,s=void 0,i=void 0){let c=e.AppRunningV2.replace(":id",a);return c=n(c,{script:t,module:s,modelType:i}),c}static openRunningWinV2(e,n,o=void 0){const{id:s,installName:i}=e,c=this.getRunningWindowPath(s,n,i,o);console.log("openRunningWinV2 appModule",o),console.log("openRunningWinV2 runningPagePath",c),setTimeout((async()=>{try{await t()}catch(e){console.log("updateGlobalEnv err",e)}}),0),window.ipcRenderer?.invoke(a.OPEN_RUNNING_WINDOW,s,c,!1)}static openAppRunningWindow(e,n,t="",o=null){const s=this.getRunningWindowPath(e,n,t,void 0,o?.type||void 0);let c=!1;n===i.REMOVE&&(c=!0),console.log("openAppRunningWindow",e,n,c,o),window.ipcRenderer?.invoke(a.OPEN_RUNNING_WINDOW,e,s,c)}static goToRunningPage(e,n,a){const t=this.getRunningWindowPath(e,n,a);location.href=location.pathname+"#"+t}static openUniversalAppWebview(n){let t=e.UniversalAppRunning.replace(":name",encodeURIComponent(n.name));n.url&&(t=t.replace(":url",encodeURIComponent(n.url))),n.icon&&(t=t.replace(":icon",encodeURIComponent(n.icon))),window.ipcRenderer?.invoke(a.OPEN_RUNNING_WINDOW,n.name,t)}static openUAppLiteWindow(n){let t=e.UniversalAppTitle.replace(":name",encodeURIComponent(n.name));n.url&&(t=t.replace(":url",encodeURIComponent(n.url))),n.icon&&(t=t.replace(":icon",encodeURIComponent(n.icon))),window.ipcRenderer?.invoke(a.OPEN_UAPP_RUNNING_WINDOW,n.name,t,n)}}const l=async(e,n)=>{let a=`/self-manage/installed-instance/app/${e.id}`;n&&(a+=`/type/${n}`);return(await o.post(a,e)).data},r=async e=>(await o.get(`/self-manage/installed-instance/${e}`)).data,p=async()=>(await o.get("/self-manage/installed-instance")).data,d=async e=>(await o.delete(`/self-manage/installed-instance/${e}`)).data,g=async e=>new Promise((async n=>{const a=async()=>{try{const t=`${s}/self-manage/installed-instance/${e}`,o=await axios.get(t),i=2e3;200===o.status?(console.log("Received 200, continue"),setTimeout(a,i)):404===o.status?(console.log("Received 404, stop"),n()):(console.log(`Received unexpected status code: ${o.status}`),n())}catch(t){const e=t;404===e.response?.status?(console.log("Received 404, stop"),n()):(console.error("Error",e.message),n())}};await a()})),u={DEFAULT:"default",DOCKER:"docker"};class m{static isWindows(){const e=navigator.userAgentData;return e&&e.platform?"Windows"===e.platform:!!navigator.userAgent&&/Win(dows )?NT/.test(navigator.userAgent)}static isMacOS(){const e=navigator.userAgentData;return e&&e.platform?"macOS"===e.platform||"MacOS"===e.platform:!!navigator.userAgent&&/Macintosh|Mac OS X/i.test(navigator.userAgent)}}export{c as A,u as I,m as O,i as a,g as b,l as c,d,r as e,p as g};
