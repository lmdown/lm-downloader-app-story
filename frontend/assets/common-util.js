import{I as e,a}from"./index.js";const t={STOP_AI_RUNNING_INSTANCE:"stop-ai-running-instance",RUNNING_STATUS_CHANGE:"running-status-change",OPEN_GLOBAL_CONFIG_DIALOG:"open-global-config-dialog"},s=async(a,t=!1)=>{if(window.ipcRenderer)return await(window.ipcRenderer?.invoke(e.SELECT_DIR,a,t))};class n{static checkModelsDirValid(e,a){if(e.subdirs=this.filterSpecialFiles(e.subdirs),e.files=this.filterSpecialFiles(e.files),!(e.subdirs&&0!==e.subdirs.length||e.files&&0!==e.files.length))return!0;const t=new Set(e.subdirs);return a.every((e=>t.has(e)))}static filterSpecialFiles(e){if(!e)return e;const a=["desktop.ini",".ds_store","thumbs.db"];return e.filter((e=>{const t=e.toLowerCase();return!a.includes(t)}))}}const r=async e=>{try{return(await a.post("/self-manage/common-util/app-running-base-env-info",{keys:e})).data}catch(t){return void console.log("err",t)}},i=async e=>{try{return(await a.post("/self-manage/common-util/save-app-running-base-env-info",{envObj:e})).data}catch(t){return void console.log("err",t)}},o=async()=>{let e;try{const t=await a.get("/self-manage/common-util/lan-ip");e=t.data?.ip}catch(t){console.log("err",t)}return e},l=async()=>{let e;try{const t=await a.get("/self-manage/common-util/user-home-dir");e=t.data?.userHomeDir}catch(t){console.log("err",t)}return e},c=async e=>{let t={};try{t=(await a.get(`/self-manage/common-util/dir-and-disk-info?dirPath=${e}`)).data}catch(s){console.log("err",s)}return t},d=async e=>{let t=[];try{const s=await a.get(`/self-manage/common-util/installed-model-files/${e}`);t=s.data?.models}catch(s){console.log("err",s)}return t};export{n as D,t as I,r as a,o as b,s as c,c as d,d as e,l as g,i as s};
