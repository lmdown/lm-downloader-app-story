import{I as e,b as n}from"./index.js";const r=(e,n)=>{const r=e.__vccOpts||e;for(const[a,i]of n)r[a]=i;return r},a={STOP_AI_RUNNING_INSTANCE:"stop-ai-running-instance",RUNNING_STATUS_CHANGE:"running-status-change",OPEN_GLOBAL_CONFIG_DIALOG:"open-global-config-dialog"},i=async(n,r=!1)=>{if(window.ipcRenderer)return await(window.ipcRenderer?.invoke(e.SELECT_DIR,n,r))};class t{static checkModelsDirValid(e,n){if(e.subdirs=this.filterSpecialFiles(e.subdirs),e.files=this.filterSpecialFiles(e.files),!(e.subdirs&&0!==e.subdirs.length||e.files&&0!==e.files.length))return!0;const r=new Set(e.subdirs);return n.every((e=>r.has(e)))}static filterSpecialFiles(e){if(!e)return e;const n=["desktop.ini",".ds_store","thumbs.db"];return e.filter((e=>{const r=e.toLowerCase();return!n.includes(r)}))}}const s=async e=>{try{return(await n.post("/self-manage/common-util/app-running-base-env-info",{keys:e})).data}catch(r){return void console.log("err",r)}},o=async e=>{try{return(await n.post("/self-manage/common-util/save-app-running-base-env-info",{envObj:e})).data}catch(r){return void console.log("err",r)}},c=async()=>{let e;try{const r=await n.get("/self-manage/common-util/lan-ip");e=r.data?.ip}catch(r){console.log("err",r)}return e},d=async()=>{let e;try{const r=await n.get("/self-manage/common-util/user-home-dir");e=r.data?.userHomeDir}catch(r){console.log("err",r)}return e},l=async e=>{let r={};try{r=(await n.get(`/self-manage/common-util/dir-and-disk-info?dirPath=${e}`)).data}catch(a){console.log("err",a)}return r},w=async e=>{let r=[];try{const a=await n.get(`/self-manage/common-util/installed-model-files/${e}`);r=a.data?.models}catch(a){console.log("err",a)}return r},u=async e=>{let r=!1;try{const a=await n.get(`/self-manage/common-util/dir-exists?dirPath=${e}`);r=a.data?.exists}catch(a){console.log("err",a)}return r},g=async()=>{let e=null;try{e=(await n.get("/self-manage/common-util/check-docker")).data}catch(r){console.log("err",r)}return e},f=async()=>{if(window.ipcRenderer)return await(window.ipcRenderer?.invoke(e.RESTART_APP))},p=async()=>{if(window.ipcRenderer)return await(window.ipcRenderer?.invoke(e.EXIT_APP))},m=async n=>{if(window.ipcRenderer)return await(window.ipcRenderer?.invoke(e.KILL_PROCESSES,n))},y=async()=>{const r=await n.get("/self-manage/common-util/get-git-bash-in-root-dir-exist");if(console.log("response?.data?.dir",r?.data?.dir),r?.data?.dir)return!0;if(window.ipcRenderer)try{return await(window.ipcRenderer?.invoke(e.CHECK_GIT))}catch(a){return console.error("check git error",a),!0}},R=async()=>{if(window.ipcRenderer)return await(window.ipcRenderer?.invoke(e.INSTALL_GIT))},h=async n=>{if(window.ipcRenderer)return await(window.ipcRenderer?.invoke(e.CLOSE_RUNNING_WINDOW,n))},N=async()=>{if(window.ipcRenderer)return await(window.ipcRenderer?.send(e.RUNNING_STATUS_CHANGE,!0))},_=async()=>{if(window.ipcRenderer)return await(window.ipcRenderer?.send(e.RUNNING_STATUS_CHANGE,!1))};export{t as D,a as I,r as _,y as a,h as b,g as c,u as d,_ as e,s as f,d as g,c as h,R as i,o as j,i as k,p as l,l as m,w as n,m as o,f as r,N as s};
